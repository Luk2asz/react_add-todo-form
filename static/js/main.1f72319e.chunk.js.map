{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","getUser","userId","usersFromServer","find","TodoList","todos","buttonClicked","titleChange","userIdChange","formSubmittedChange","buttonClickedChange","useState","updatedTodos","setUpdatedTodos","useEffect","newTodo","Math","max","map","Number","App","setTitle","setuserId","formSubmitted","setFormSubmitted","setbuttonClicked","action","onSubmit","event","preventDefault","method","htmlFor","type","placeholder","value","onChange","target","String","disabled","x","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f72319e.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/index';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import { Todo } from '../../types/index';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={todo.completed\n      ? 'TodoInfo TodoInfo--completed'\n      : 'TodoInfo'}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n    {todo.user && (<UserInfo user={todo.user} />)}\n  </article>\n);\n","import { useEffect, useState } from 'react';\nimport { Todo, User } from '../../types/index';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport usersFromServer from '../../api/users';\n\nexport function getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  // if there is no user with a given userId\n  return foundUser || null;\n}\n\ntype Props = {\n  todos: Todo[];\n  title: string;\n  userId: number | null;\n  buttonClicked: boolean\n  titleChange: (x: string) => void;\n  userIdChange: (x: number) => void;\n  formSubmittedChange: (x: boolean) => void;\n  buttonClickedChange: (x: boolean) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  title,\n  userId,\n  buttonClicked,\n  titleChange,\n  userIdChange,\n  formSubmittedChange,\n  buttonClickedChange,\n}) => {\n  const [updatedTodos, setUpdatedTodos] = useState(todos);\n\n  useEffect(() => {\n    if (buttonClicked) {\n      if (title && userId) {\n        const newTodo = {\n          id: Math.max(...updatedTodos.map(todo => todo.id)) + 1,\n          title,\n          completed: false,\n          userId: Number(userId),\n          user: getUser(Number(userId)),\n        };\n\n        buttonClickedChange(false);\n        setUpdatedTodos([...updatedTodos, newTodo]);\n        formSubmittedChange(false);\n        titleChange('');\n        userIdChange(0);\n      } else {\n        buttonClickedChange(false);\n        formSubmittedChange(true);\n      }\n\n      buttonClickedChange(false);\n    }\n  }, [buttonClicked]);\n\n  return (\n    <section className=\"TodoList\">\n      {updatedTodos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import React, { FormEventHandler, useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { Todo, User } from './types/index';\n// import { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList/TodoList';\n\nexport function getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  // if there is no user with a given userId\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [userId, setuserId] = useState<number>(0);\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  const [buttonClicked, setbuttonClicked] = useState(false);\n\n  const titleChange = (x: string) => {\n    setTitle(x);\n  };\n\n  const userIdChange = (x: number) => {\n    setuserId(x);\n  };\n\n  const formSubmittedChange = (x: boolean) => {\n    setFormSubmitted(x);\n  };\n\n  const buttonClickedChange = (x: boolean) => {\n    setbuttonClicked(x);\n  };\n\n  const handleSubmit: FormEventHandler = (event) => {\n    event.preventDefault();\n    setbuttonClicked(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" onSubmit={handleSubmit} method=\"POST\">\n\n        <div className=\"field\">\n          <label htmlFor=\"title\">\n            Title:\n            {' '}\n            <input\n              id=\"title\"\n              name=\"title\"\n              type=\"text\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={(event) => setTitle(event.target.value)}\n              data-cy=\"titleInput\"\n            />\n          </label>\n\n          {(!title && formSubmitted) && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">\n            User:\n            {' '}\n            <select\n              data-cy=\"userSelect\"\n              id=\"user\"\n              name=\"user\"\n              value={String(userId)}\n              onChange={(event) => setuserId(Number(event.target.value))}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map(({ id, name }) => (\n                <option\n                  value={id}\n                  key={id}\n                >\n                  {name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {(!userId && formSubmitted) && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        todos={todos}\n        title={title}\n        userId={userId}\n        buttonClicked={buttonClicked}\n        titleChange={titleChange}\n        userIdChange={userIdChange}\n        formSubmittedChange={formSubmittedChange}\n        buttonClickedChange={buttonClickedChange}\n      />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}